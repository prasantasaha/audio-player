{"version":3,"sources":["util.ts","AppContext.tsx","ChannelsList.tsx","PlayerControls.tsx","Player.tsx","Radio.tsx","Header.tsx","ErrorBoundary.tsx","index.tsx"],"names":["fetchChannels","a","fetch","headers","json","response","AppContext","createContext","channels","currentChannel","isPlaying","updateCurrentChannel","channelId","togglePlayBack","nextChannel","prevChannel","AppContextProvider","children","search","window","location","URLSearchParams","get","useState","setCurrentChannel","setIsPlaying","setChannels","useEffect","init","useCallback","autoPlay","newChannel","find","channel","id","getCurrentChannelIndex","findIndex","length","prevSelectedchannel","sessionStorage","getItem","JSON","parse","error","console","log","setItem","stringify","currentChannelIndex","Provider","value","useAppContext","useContext","OuterWrapper","styled","div","Header","InnerWrapper","ItemWrapper","attrs","props","style","backgroundImage","image","ChannelDetails","imageSrc","onClick","ChannelsList","map","item","Wrapper","PlayerControls","Button","icon","Previous","PauseFill","PlayFill","plain","size","Next","expanded","undefined","ChannelInfo","Player","isLoading","setIsLoading","hasError","setHasError","isExpanded","setIsExpanded","playerRef","useRef","audioSrc","hls","Hls","enableWorker","current","attachMedia","on","Events","MEDIA_ATTACHED","loadSource","MANIFEST_PARSED","play","catch","ERROR","event","data","fatal","type","ErrorTypes","NETWORK_ERROR","stopLoad","MEDIA_ERROR","recoverMediaError","isSupported","document","title","destroy","setTimeout","paused","pause","ref","src","Down","Image","width","maxHeight","maxWidth","Text","textAlign","Spinner","Container","App","setAutoPlay","formatSuggestions","suggestedChannels","filter","suggestedChannel","toLowerCase","indexOf","index","list","label","Box","direction","align","gap","border","pad","borderRadius","selectedChannel","setSelectedChannel","suggestionOpen","setSuggestionOpen","suggestions","setSuggestions","selectedChannelTitle","setSelectedChannelTitle","onInputChange","newValue","target","trim","onSuggestionSelect","suggestion","onSuggestionsOpen","onSuggestionsClose","elevation","borderBottomLeftRadius","borderBottomRightRadius","TextInput","Search","reverse","placeholder","onChange","ErrorBoundary","state","info","this","Component","myCustomTheme","deepMerge","dark","global","drop","background","shadowSize","extend","medium","light","font","family","input","weight","render","Grommet","full","theme","Radio","getElementById"],"mappings":"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","file":"static/js/main.101338fa.chunk.js","sourcesContent":["// import * as cheerio from 'cheerio';\n\nexport interface IChannelInfo {\n  id: string;\n  title: string;\n  imageSrc: string;\n  audioSrc: string;\n}\n\n// const getChannelsFromScriptTag = (htmlStr: cheerio.Root) => {\n//   const script = htmlStr('script').get()[7].children[0].data;\n//   return JSON.parse(\n//     script\n//       .match(/\\{(.*?);/)[0]\n//       // Replace \":\" with \"@colon@\" if it's between double-quotes\n//       .replace(/:\\s*\"([^\"]*)\"/g, (_: unknown, p1: string) => {\n//         return ': \"' + p1.replace(/:/g, '@colon@') + '\"';\n//       })\n\n//       // Replace \":\" with \"@colon@\" if it's between single-quotes\n//       .replace(/:\\s*'([^']*)'/g, (_: unknown, p1: string) => {\n//         return ': \"' + p1.replace(/:/g, '@colon@') + '\"';\n//       })\n\n//       // Add double-quotes around any tokens before the remaining \":\"\n//       .replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?\\s*:/g, '\"$2\": ')\n\n//       // Turn \"@colon@\" back into \":\"\n//       .replace(/@colon@/g, ':')\n//       .replace(/\\,(?!\\s*?[\\{\\[\\\"\\'\\w])/g, '')\n//       .replace(';', '')\n//   );\n// };\n\nconst fetchChannels = async (\n\n): Promise<IChannelInfo[]> => {\n  const response = await (await fetch(\n    'https://player-b7f2.restdb.io/rest/air-channels'\n    , {\n      headers: {\n        'x-apikey': \"612c3e3f43cedb6d1f97ea9f\"\n      }\n    })).json();\n  return response as IChannelInfo[];\n\n\n  // const response = await (await fetch(\n  //   'https://newsonair.com/playersource.php'\n  // )).text();\n  // const html = cheerio.load(response);\n  // const channels = getChannelsFromScriptTag(html);\n\n  // const list = Object.entries(channels).map(\n  //   (item: [string, { name: string; image: string; live_url: string }]) => {\n  //     const [key, value] = item;\n  //     return {\n  //       id: key,\n  //       title: value.name,\n  //       imageSrc: value.image,\n  //       audioSrc: value.live_url\n  //     };\n  //   }\n  // );\n  // return list;\n};\n\nexport { fetchChannels };\n","import React, {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n  useCallback\n} from 'react';\nimport { fetchChannels, IChannelInfo } from './util';\n\ntype AppContextParams = {\n  channels: IChannelInfo[];\n  currentChannel: IChannelInfo | null;\n  isPlaying: boolean;\n  updateCurrentChannel: (channelId: string) => void;\n  togglePlayBack: () => void;\n  nextChannel: () => void;\n  prevChannel: () => void;\n};\n\nexport const AppContext = createContext<AppContextParams>({\n  channels: [],\n  currentChannel: null,\n  isPlaying: false,\n  updateCurrentChannel: (channelId: string) => { },\n  togglePlayBack: () => { },\n  nextChannel: () => { },\n  prevChannel: () => { }\n});\n\nexport const AppContextProvider = ({\n  children\n}: {\n  children: JSX.Element[] | JSX.Element;\n}): JSX.Element => {\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  const channelId = params.get('channelId');\n  const [currentChannel, setCurrentChannel] = useState<IChannelInfo | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [channels, setChannels] = useState<IChannelInfo[]>([]);\n\n  useEffect(() => {\n    void init();\n  }, []);\n\n  const init = async () => {\n    setChannels(await fetchChannels());\n  };\n\n  const updateCurrentChannel = useCallback((\n    channelId: string,\n    autoPlay: boolean = true\n  ) => {\n    const newChannel = channels.find(channel => channel.id === channelId);\n    if (newChannel) {\n      setCurrentChannel(newChannel);\n    }\n\n    if (autoPlay && !isPlaying) {\n      setIsPlaying(true);\n    }\n  }, [channels, isPlaying]);\n\n  const getCurrentChannelIndex = useCallback(\n    () => channels.findIndex(channel => currentChannel && channel.id === currentChannel.id),\n    [channels, currentChannel]\n  );\n\n  useEffect(() => {\n    if (!channels || !channels.length) {\n      return;\n    }\n\n    if (channelId) {\n      updateCurrentChannel(channelId, false);\n      return;\n    }\n\n    const prevSelectedchannel = sessionStorage.getItem('currentChannel');\n    if (prevSelectedchannel) {\n      try {\n        setCurrentChannel(JSON.parse(prevSelectedchannel));\n      } catch (error) {\n        console.log({ error });\n      }\n    }\n  }, [channels, channelId, updateCurrentChannel]);\n\n  useEffect(() => {\n    if (!currentChannel) {\n      return;\n    }\n    sessionStorage.setItem('currentChannel', JSON.stringify(currentChannel));\n  }, [currentChannel]);\n\n\n  const nextChannel = useCallback(() => {\n    const currentChannelIndex = getCurrentChannelIndex();\n\n    if (currentChannelIndex < channels.length - 1) {\n      setCurrentChannel(channels[currentChannelIndex + 1]);\n      return;\n    }\n\n    setCurrentChannel(channels[0]);\n  }, [channels, getCurrentChannelIndex]);\n\n  const prevChannel = useCallback(() => {\n    const currentChannelIndex = getCurrentChannelIndex();\n\n    if (currentChannelIndex >= 1) {\n      setCurrentChannel(channels[currentChannelIndex - 1]);\n      return;\n    }\n\n    setCurrentChannel(channels[channels.length - 1]);\n  }, [channels, getCurrentChannelIndex]);\n\n  const togglePlayBack = () => {\n    setIsPlaying(isPlaying => !isPlaying);\n  };\n  return (\n    <AppContext.Provider\n      value={{\n        channels,\n        currentChannel,\n        isPlaying,\n        updateCurrentChannel,\n        togglePlayBack,\n        nextChannel,\n        prevChannel\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = (): AppContextParams => useContext(AppContext);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useAppContext } from './AppContext';\nimport { IChannelInfo } from './util';\nconst OuterWrapper = styled.div``;\n\nconst Header = styled.div`\n  margin: 12px 20px;\n`;\n\nconst InnerWrapper = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n  gap: 18px;\n  padding: 10px;\n  max-width: 800px;\n`;\nconst ItemWrapper = styled.div.attrs((props: { image: string }) => ({\n  style: {\n    backgroundImage: `url(${props.image})`\n  }\n})) <{ image: string }>`\n  border-radius: 8px;\n  overflow: hidden;\n  position: relative;\n  display: flex;\n  cursor: pointer;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: center;\n  width: 160px;\n  height: 160px;\n  border: 0.2px solid white;\n  background-color: white;\n  filter: drop-shadow(0 0 0.15rem white);\n\n  :hover {\n    opacity: 0.8;\n    cursor: pointer;\n  }\n`;\n\nconst ChannelDetails = (props: IChannelInfo) => {\n  const { updateCurrentChannel } = useAppContext();\n  return (\n    <ItemWrapper\n      image={props.imageSrc}\n      onClick={() => {\n        updateCurrentChannel(props.id);\n      }}\n    >\n      {/* <span>{props.title}</span> */}\n    </ItemWrapper>\n  );\n};\n\nconst ChannelsList = (): JSX.Element => {\n  const { channels } = useAppContext();\n\n  return (\n    <OuterWrapper>\n      <Header>On-Air Stations</Header>\n      <InnerWrapper>\n        {channels.map(item => (\n          <ChannelDetails key={item.id} {...item} />\n        ))}\n      </InnerWrapper>\n    </OuterWrapper>\n  );\n};\n\nexport default ChannelsList;\n","import { Button } from 'grommet';\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { useAppContext } from './AppContext';\n\nimport { PlayFill, PauseFill, Next, Previous } from 'grommet-icons'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst PlayerControls = (): JSX.Element => {\n  const {\n    currentChannel,\n    isPlaying,\n    togglePlayBack,\n    nextChannel,\n    prevChannel\n  } = useAppContext();\n  if (!currentChannel) {\n    return <Fragment />;\n  }\n\n  return (\n    <Wrapper>\n      <Button\n        icon={<Previous />}\n        onClick={() => prevChannel()}\n      />\n\n      <Button\n        icon={isPlaying ? <PauseFill /> : <PlayFill />}\n        onClick={() => togglePlayBack()}\n        plain={false}\n        size={'large'}\n      />\n\n      <Button\n        icon={<Next />}\n        onClick={() => nextChannel()}\n      />\n    </Wrapper>\n  );\n};\n\nexport default PlayerControls;\n","import { Button, Spinner } from 'grommet';\nimport { Image } from 'grommet/components/Image';\nimport { Text } from 'grommet/components/Text';\nimport Hls, { ErrorData, ErrorTypes } from 'hls.js';\nimport React, { Fragment, useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useAppContext } from './AppContext';\nimport PlayerControls from './PlayerControls';\nimport { Down } from 'grommet-icons'\n\nconst Wrapper = styled.div<{ expanded: boolean }>`\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background-color: #404040;\n  color: white;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  padding:  ${props => (props.expanded ? '80px 0' : '6px 10px')};\n  flex-direction: ${props => (props.expanded ? 'column' : 'row')};\n  justify-content: ${props => (props.expanded ? 'space-around' : 'space-between')};\n  box-sizing: border-box;\n  filter: drop-shadow(0 0 0.20rem black);\n  height: ${props => (props.expanded ? '100%' : undefined)};\n`;\n\nconst ChannelInfo = styled.div<{ expanded: boolean }>`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  flex: 1;\n  gap:  ${props => (props.expanded ? '50px' : '10px')};\n  padding: ${props => (props.expanded ? '50px' : undefined)};\n  width: ${props => (props.expanded ? '100%' : undefined)};\n  flex-direction: ${props => (props.expanded ? 'column' : 'row')};\n`\n\nexport interface IPlayerProps {\n  autoPlay?: boolean\n}\n\nconst Player = (props: IPlayerProps): JSX.Element => {\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  const channelId = params.get('channelId');\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [hasError, setHasError] = useState<boolean>(false)\n  const { currentChannel, isPlaying } = useAppContext();\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const playerRef = useRef<HTMLMediaElement>(null);\n\n  const init = useCallback((audioSrc: string): Hls | undefined => {\n    const hls = new Hls({\n      enableWorker: true\n    });\n\n    if (playerRef.current != null) {\n      hls.attachMedia(playerRef.current);\n    }\n\n    hls.on(Hls.Events.MEDIA_ATTACHED, () => {\n      setHasError(false);\n      setIsLoading(true);\n\n      hls.loadSource(audioSrc);\n\n      hls.on(Hls.Events.MANIFEST_PARSED, () => {\n        setIsLoading(false);\n        if (props.autoPlay) {\n          playerRef?.current\n            ?.play()\n            .catch(() =>\n              console.log(\n                'Unable to autoplay prior to user interaction with the dom.'\n              )\n            );\n        }\n      });\n    });\n\n    hls.on(Hls.Events.ERROR, (event, data: ErrorData) => {\n      setHasError(true);\n\n      // if ((data.type === ErrorTypes.NETWORK_ERROR || data.type === ErrorTypes.MEDIA_ERROR) && isPlaying) {\n      //   // togglePlayBack()\n      // }\n\n      if (data.fatal) {\n        switch (data.type) {\n          case ErrorTypes.NETWORK_ERROR:\n            hls.stopLoad()\n            break;\n          case ErrorTypes.MEDIA_ERROR:\n            hls.recoverMediaError();\n            break;\n          default:\n            break;\n        }\n      }\n    });\n\n    return hls;\n  }, [props.autoPlay]);\n\n  const getAudioElement = () => {\n    // If Media Source is supported, use HLS.js to play video\n    if (Hls.isSupported()) {\n      return <audio ref={playerRef} />\n    }\n    // Fallback to using a regular video player if HLS is supported by default in the user's browser\n    return <audio ref={playerRef} src={currentChannel?.audioSrc} autoPlay={props.autoPlay} />;\n  }\n\n  useEffect(() => {\n    let hls: Hls | undefined;\n    // Check for Media Source support\n    if (Hls.isSupported() && currentChannel?.audioSrc) {\n      hls = init(currentChannel?.audioSrc);\n\n      document.title = `Radio - ${currentChannel.title}`\n    }\n\n    return () => {\n      if (hls != null) {\n        hls.destroy();\n      }\n    };\n  }, [init, currentChannel]);\n\n  useEffect(() => {\n    if (currentChannel && currentChannel.id === channelId) {\n      setIsExpanded(true);\n    }\n  }, [currentChannel, channelId])\n\n  useEffect(() => {\n    if (isPlaying) {\n      setTimeout(() => {\n        if (playerRef.current?.paused && !isLoading) {\n          playerRef?.current.play();\n        }\n      }, 0)\n\n      return;\n    }\n    playerRef.current?.pause()\n  }, [isPlaying, isLoading])\n\n  if (!currentChannel?.audioSrc) {\n    return <Fragment />\n  }\n\n  return (\n    <Wrapper expanded={isExpanded}>\n      {getAudioElement()}\n      {isExpanded && <Button\n        icon={<Down size={'large'} />}\n        onClick={() => setIsExpanded(false)}\n      />}\n      <ChannelInfo\n        expanded={isExpanded}\n        onClick={() => { setIsExpanded(true) }}>\n        {currentChannel?.imageSrc &&\n          <Image src={currentChannel.imageSrc}\n            width={isExpanded ? '70%' : 60}\n            style={{ maxHeight: '30vh', maxWidth: '30vh' }} />}\n        <Text size={isExpanded ? 'xlarge' : 'small'}\n          textAlign={'start'}>{currentChannel?.title}\n        </Text>\n        {isLoading\n          && !hasError && <Spinner />}\n      </ChannelInfo>\n      <PlayerControls />\n    </Wrapper>);\n}\n\n\nexport default Player;\n","import { Spinner } from 'grommet';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useAppContext } from './AppContext';\nimport ChannelsList from './ChannelsList';\nimport Player from './Player';\n\nconst Container = styled.div`\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 80px;\n`;\n\nconst App = () => {\n  const { channels, isPlaying } = useAppContext();\n  const [autoPlay, setAutoPlay] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isPlaying && !autoPlay) {\n      setAutoPlay(true);\n    }\n  }, [autoPlay, isPlaying]);\n\n  return (\n    <Container>\n      {channels && channels.length ? <>\n        <ChannelsList />\n        <Player autoPlay={autoPlay} />\n      </> : <Spinner />}\n    </Container>\n  );\n};\n\nexport default App;\n","import { Box, Image, Text, TextInput } from 'grommet';\nimport { Search } from 'grommet-icons';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useAppContext } from './AppContext';\nimport { IChannelInfo } from './util';\n\nconst OuterWrapper = styled.div`\n  position: sticky;\n  top: 0;\n  z-index: 3;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background-color: #fff;\n  background-color: var(--bg-primary-color);\n  filter: drop-shadow(0 0 0.20rem black);\n`;\nconst InnerWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  justify-content: space-between;\n  padding: 0 20px;\n  height: 72px;\n  border-bottom: 1px solid #ccc;\n  background-color: black;\n  align-items: center;\n`;\n\ninterface ISuggestion {\n  label: JSX.Element, value: string, channel: IChannelInfo\n}\n\nconst formatSuggestions = (suggestedChannels: IChannelInfo[], value: string = ''): ISuggestion[] =>\n  suggestedChannels\n    .filter(\n      suggestedChannel =>\n        suggestedChannel.title.toLowerCase().indexOf(value.toLowerCase()) >= 0\n    )\n    .map((suggestedChannel, index, list) => ({\n      label: (\n        <Box\n          direction=\"row\"\n          align=\"center\"\n          gap=\"small\"\n          border={index < list.length - 1 ? 'bottom' : undefined}\n          pad=\"small\"\n        >\n          <Image\n            width=\"80px\"\n            src={suggestedChannel.imageSrc}\n            style={{ borderRadius: '8px' }}\n          />\n          <Text size={'small'}>\n            {suggestedChannel?.title}\n          </Text>\n        </Box>\n      ),\n      value: suggestedChannel.title,\n      channel: suggestedChannel\n    }));\n\nconst Header = (): JSX.Element => {\n  const { channels, updateCurrentChannel } = useAppContext();\n  const [selectedChannel, setSelectedChannel] = useState<IChannelInfo>();\n  const [suggestionOpen, setSuggestionOpen] = useState(false);\n  const [suggestions, setSuggestions] = useState<ISuggestion[]>([]);\n  const [selectedChannelTitle, setSelectedChannelTitle] = useState<string>('')\n\n  useEffect(() => {\n    if (selectedChannel && selectedChannel.id) {\n      updateCurrentChannel(selectedChannel.id)\n    }\n\n  }, [selectedChannel, updateCurrentChannel])\n\n  const onInputChange = useCallback(\n    event => {\n      const { value: newValue } = event.target;\n      setSelectedChannelTitle(newValue);\n      setSelectedChannel(newValue)\n\n      if (!newValue.trim()) {\n        setSuggestions([]);\n      } else {\n        setSuggestions(formatSuggestions(channels, newValue));\n      }\n    },\n    [channels]\n  );\n\n  const onSuggestionSelect = useCallback(\n    event => {\n      setSelectedChannel(event.suggestion.channel);\n      setSelectedChannelTitle(event.suggestion.value);\n    },\n    []\n  );\n\n  const onSuggestionsOpen = useCallback(() => {\n    setSuggestions(formatSuggestions(channels, selectedChannel?.title));\n    setSuggestionOpen(true);\n  }, [channels, selectedChannel]);\n\n  const onSuggestionsClose = useCallback(() => {\n    setSuggestions([]);\n    setSuggestionOpen(false);\n    setSelectedChannel(undefined);\n    setSelectedChannelTitle('')\n  }, []);\n\n  return (\n    <OuterWrapper>\n      <InnerWrapper>\n        <h1>Radio</h1>\n        <Box\n          width=\"medium\"\n          gap=\"medium\"\n          direction=\"row\"\n          align=\"center\"\n          elevation={suggestionOpen ? 'medium' : undefined}\n          style={\n            suggestionOpen\n              ? {\n                borderBottomLeftRadius: '0px',\n                borderBottomRightRadius: '0px',\n              }\n              : undefined\n          } pad={{ 'left': 'large' }}>\n          <TextInput\n            icon={<Search />}\n            reverse\n            placeholder=\"search\"\n            suggestions={suggestions}\n            value={selectedChannelTitle}\n            onChange={onInputChange}\n            onSuggestionsOpen={onSuggestionsOpen}\n            onSuggestionsClose={onSuggestionsClose}\n            onSuggestionSelect={onSuggestionSelect}\n          />\n        </Box>\n\n      </InnerWrapper>\n    </OuterWrapper>\n  );\n};\n\nexport default Header;\n","import React, { Component } from 'react';\n\ninterface IErrorState {\n  hasError: boolean;\n}\nclass ErrorBoundary extends Component<{}, IErrorState> {\n  state = { hasError: false };\n\n  static getDerivedStateFromError(error: unknown) {\n    if (error) {\n      console.log(error);\n      return { hasError: true };\n    }\n  }\n\n  componentDidCatch(error: unknown, info: unknown) {\n    console.log(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Grommet } from 'grommet';\n\nimport { AppContextProvider } from './AppContext';\nimport Radio from './Radio';\nimport Header from './Header';\nimport { dark, ThemeType } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\n\nimport ErrorBoundary from './ErrorBoundary';\n\nconst myCustomTheme: ThemeType = deepMerge(dark, {\n  global: {\n    drop: {\n      background: '#444444',\n      shadowSize: 'medium',\n      extend: `\n          border-bottom-left-radius: 12px;\n          border-bottom-right-radius: 12px;\n          overflow: hidden;\n        `\n    },\n    elevation: {\n      dark: {\n        medium: '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)'\n      },\n      light: {\n        medium: '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)'\n      }\n    },\n    font: {\n      size: '14px',\n      family: 'Sora'\n    },\n    input: {\n      weight: 400\n    }\n  }\n});\n\nrender(\n  <ErrorBoundary>\n    <Grommet full theme={myCustomTheme}>\n      <AppContextProvider>\n        <Header />\n        <Radio />\n      </AppContextProvider>\n    </Grommet>\n  </ErrorBoundary>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}